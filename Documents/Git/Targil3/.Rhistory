words_female[227]
words_female[300:350]
words_female[400:450]
words_female[500:550]
words_female[700:750]
words_female[50:100]
words_female[67]
words_female[1:50]
words_female[899:1000]
words_female[899:920]
words_female[909]
}
#sort the data
DT = mylist
DT = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT, as.numeric))))
DT = DT[order(-DT$v),]
print("female words")
#create plot
words_female = DT[1:1200]
words_female
wf1 = words_female[152]
wf2 = words_female[153]
wf3 = words_female[216]
wf4 = words_female[227]
wf5 = words_female[909]
wf6 = words_female[67]
wf1$x
wf2$x
wf3$x
wf4$x
wf5$x
wf6$x
library(ggplot2)
library(data.table)
require(stats)
library(RCurl)
#Get the data
url = "http://www.crowdflower.com/wp-content/uploads/2016/03/gender-classifier-DFE-791531.csv"
file = getURL(url)
data = read.csv(text = file)
data
#manipulate the data
data <- data[data$X_unit_id < 815720437,]
print(data$X_unit_id)
#Get female - male relation
length(data$gender=="male")
length(data$gender=="female")
#Display with barplot graph
a = c(length(data$gender=="male"),length(data$gender=="female"))
barplot(a,names.arg = c("male","female"),col = c('#A8C7F7',"red"), main="Amount of male and female use Twitter")
#Get all male twitter text
text_male = subset(data, data$gender=="male")
text_male = text_male$text
print(length(text_male))
#create list from text_male
text_male_list <- text_male[1:length(text_male)]
#create list of key and value
#key = word , value = frequency
words = list()
for ( i in text_male_list) {
# Merge the two lists.
words <- c(words,unlist(strsplit(i," ")))
}
count = 0;
mylist = list()
for (word in words){
for (xWord in words){
if (word == xWord )
count =  count + 1;
}
key <- word
value <- count
mylist[[ key ]] <- value
count = 0;
}
words
#sort the data
DT1 = mylist
DT1 = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT1, as.numeric))))
DT1 = DT1[order(-DT1$v),]
#create plot
print("male words")
#choose 6 words and display it with pie graph
#create plot
words_male = DT1[1:1200]
w1 = words_male[110]
w3 = words_male[701]
w4 = words_male[272]
w5 = words_male[107]
w6 = words_male[1200]
w1
w2
w3
w4
w5
w6
#Simple Pie Chart
slices <- c(w1$v,w2$v,w3$v,w4$v,w5$v,w6$v)
lbls <- c(w1$x,w2$x,w3$x,w4$x,w5$x,w6$x)
pie(slices, labels = lbls, main="Pie Chart of Males frequency words")
#get all female twitter text
text_female = subset(data, data$gender=="female")
text_female = text_female$text
print(length(text_female))
v <- text_female[1:length(text_female)]
print(v)
#create list of key and value
#key = word , value = frequency
x = list()
for ( i in v) {
# Merge the two lists.
x <- c(x,unlist(strsplit(i," ")))
}
count = 0;
mylist = list()
for (word in x){
for (xWord in x){
if (word == xWord)
count =  count + 1;
}
key <- word
value <- count
mylist[[ key ]] <- value
count = 0;
}
#sort the data
DT = mylist
DT = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT, as.numeric))))
DT = DT[order(-DT$v),]
print("female words")
#create plot
words_female = DT[1:1200]
words_female
wf1 = words_female[152]
wf2 = words_female[153]
wf3 = words_female[216]
wf4 = words_female[227]
wf5 = words_female[909]
wf6 = words_female[67]
wf1$x
wf2$x
wf3$x
wf4$x
wf5$x
wf6$x
# Simple Pie Chart
slices <- c(wf1$v,wf2$v,wf3$v,w4$v,wf5$v,wf6$v)
lbls <- c(wf1$x,wf2$x,wf3$x,wf4$x,wf5$x,wf6$x)
pie(slices, labels = lbls, main="Pie Chart of females frequency words")
#Simple Pie Chart
slices <- c(w1$v,w2$v,w3$v,w4$v,w5$v,w6$v)
lbls <- c(w1$x,w2$x,w3$x,w4$x,w5$x,w6$x)
pie(slices, labels = lbls, main="Pie Chart of Males frequency words")
# Chunk 1
library(RCurl)
#Get the data
url = "http://www.crowdflower.com/wp-content/uploads/2016/03/gender-classifier-DFE-791531.csv"
file = getURL(url)
data = read.csv(text = file)
# Chunk 2
#Manipulate the data
data <- data[data$X_unit_id < 815720437,]
# Chunk 3
#Get female - male relation
length(data$gender=="male")
length(data$gender=="female")
# Chunk 4
#Display with barplot graph
a = c(length(data$gender=="male"),length(data$gender=="female"))
barplot(a,names.arg = c("male","female"),col = c("blue","red"), main="Amount of male and female use Twitter")
# Chunk 5
#Get all male twitter text
text_male = subset(data, data$gender=="male")
text_male = text_male$text
# Chunk 6
#create list from text_male
text_male_list <- text_male[1:length(text_male)]
words = list()
for ( i in text_male_list) {
# Merge the two lists.
words <- c(words,unlist(strsplit(i," ")))
}
# Chunk 7
#key = word , value = frequency
count = 0;
mylist = list()
for (word in words){
for (xWord in words){
if (word == xWord)
count =  count + 1;
}
key <- word
value <- count
mylist[[ key ]] <- value
count = 0;
}
# Chunk 8
library(data.table)
#sort the data
DT1 = mylist
DT1 = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT1, as.numeric))))
DT1 = DT1[order(-DT1$v),]
# Chunk 9
words_male = DT1[1:1200]
print(words_male[100:500], n=400)
words_male = DT1[1:1200]
w1 = words_male[110]
w3 = words_male[701]
w4 = words_male[272]
w5 = words_male[107]
w6 = words_male[1200]
# Simple Pie Chart
slices <- c(w1$v,w2$v,w3$v,w4$v,w5$v,w6$v)
lbls <- c(w1$x,w2$x,w3$x,w4$x,w5$x,w6$x)
pie(slices, labels = lbls, main="Pie Chart Males frequency words")
words_male[106]
words_male[105]
words_male[120]
words_male[105:170]
words_male[164]
library(ggplot2)
library(data.table)
require(stats)
library(RCurl)
#Get the data
url = "http://www.crowdflower.com/wp-content/uploads/2016/03/gender-classifier-DFE-791531.csv"
file = getURL(url)
data = read.csv(text = file)
data
#manipulate the data
data <- data[data$X_unit_id < 815720437,]
print(data$X_unit_id)
#Get female - male relation
length(data$gender=="male")
length(data$gender=="female")
#Display with barplot graph
a = c(length(data$gender=="male"),length(data$gender=="female"))
barplot(a,names.arg = c("male","female"),col = c('#A8C7F7',"red"), main="Amount of male and female use Twitter")
#Get all male twitter text
text_male = subset(data, data$gender=="male")
text_male = text_male$text
print(length(text_male))
#create list from text_male
text_male_list <- text_male[1:length(text_male)]
#create list of key and value
#key = word , value = frequency
words = list()
for ( i in text_male_list) {
# Merge the two lists.
words <- c(words,unlist(strsplit(i," ")))
}
count = 0;
mylist = list()
for (word in words){
for (xWord in words){
if (word == xWord )
count =  count + 1;
}
key <- word
value <- count
mylist[[ key ]] <- value
count = 0;
}
words
#sort the data
DT1 = mylist
DT1 = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT1, as.numeric))))
DT1 = DT1[order(-DT1$v),]
#create plot
print("male words")
#choose 6 words and display it with pie graph
#create plot
words_male = DT1[1:1200]
w1 = words_male[110]
w2 = words_male[164]
w3 = words_male[701]
w4 = words_male[272]
w5 = words_male[107]
w6 = words_male[1200]
w1
w2
w3
w4
w5
w6
#Simple Pie Chart
slices <- c(w1$v,w2$v,w3$v,w4$v,w5$v,w6$v)
lbls <- c(w1$x,w2$x,w3$x,w4$x,w5$x,w6$x)
pie(slices, labels = lbls, main="Pie Chart of Males frequency words")
#get all female twitter text
text_female = subset(data, data$gender=="female")
text_female = text_female$text
print(length(text_female))
v <- text_female[1:length(text_female)]
print(v)
#create list of key and value
#key = word , value = frequency
x = list()
for ( i in v) {
# Merge the two lists.
x <- c(x,unlist(strsplit(i," ")))
}
count = 0;
mylist = list()
for (word in x){
for (xWord in x){
if (word == xWord)
count =  count + 1;
}
key <- word
value <- count
mylist[[ key ]] <- value
count = 0;
}
#sort the data
DT = mylist
DT = data.table(x=c(names(mylist)),v=c(do.call(rbind, lapply(DT, as.numeric))))
DT = DT[order(-DT$v),]
print("female words")
#create plot
words_female = DT[1:1200]
words_female
wf1 = words_female[152]
wf2 = words_female[153]
wf3 = words_female[216]
wf4 = words_female[227]
wf5 = words_female[909]
wf6 = words_female[67]
wf1$x
wf2$x
wf3$x
wf4$x
wf5$x
wf6$x
# Simple Pie Chart
slices <- c(wf1$v,wf2$v,wf3$v,w4$v,wf5$v,wf6$v)
lbls <- c(wf1$x,wf2$x,wf3$x,wf4$x,wf5$x,wf6$x)
pie(slices, labels = lbls, main="Pie Chart of females frequency words")
source('~/OpenWeatherApi.R')
#get the data
jsonData = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=295548&APPID=0790aa655754a712e0fb78e2fa2277c7")
names(jsonData)
#get current weather of my city bat yam
wind = jsonData$wind$speed
cloudiness = jsonData$clouds$all
humidity = jsonData$main$humidity
temp = jsonData$main$temp
source('~/OpenWeatherApi.R')
source('~/OpenWeatherApi.R')
library(RCurl)
library(RJSONIO)
library(plyr)
library(bitops)
library(jsonlite)
require(data.table)
library(rworldmap)
#get the data
jsonData = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=295548&APPID=0790aa655754a712e0fb78e2fa2277c7")
names(jsonData)
#get current weather of my city bat yam
wind = jsonData$wind$speed
cloudiness = jsonData$clouds$all
humidity = jsonData$main$humidity
temp = jsonData$main$temp - 273.15
temp_max = jsonData$main$temp_max - 273.15
temp_min = jsonData$main$temp_min - 273.15
#current weather in Bat yam
weatherTable = matrix(c(wind,cloudiness,humidity,temp,temp_min,temp_max),ncol=1,byrow=TRUE)
rownames(weatherTable)<-c("wind","cloudiness","humidity","temp","temp_min","temp_max")
colnames(weatherTable)<-c("value")
weatherTable <- as.table(weatherTable)
names(weatherTable)
source('~/OpenWeatherApi.R')
library(RCurl)
library(RJSONIO)
library(plyr)
library(bitops)
library(jsonlite)
require(data.table)
library(rworldmap)
#get the data
jsonData = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=295548&APPID=0790aa655754a712e0fb78e2fa2277c7")
names(jsonData)
#get current weather of my city bat yam
wind = jsonData$wind$speed
cloudiness = jsonData$clouds$all
humidity = jsonData$main$humidity
temp = jsonData$main$temp - 273.15
temp_max = jsonData$main$temp_max - 273.15
temp_min = jsonData$main$temp_min - 273.15
#current weather in Bat yam
weatherTable = matrix(c(wind,cloudiness,humidity,temp,temp_min,temp_max),ncol=1,byrow=TRUE)
rownames(weatherTable)<-c("wind","cloudiness","humidity","temp","temp_min","temp_max")
colnames(weatherTable)<-c("value")
weatherTable <- as.table(weatherTable)
weatherTable
source('~/OpenWeatherApi.R')
#Get the weather in several cities in Israel and display the temp
NetanyaJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=294071&APPID=0790aa655754a712e0fb78e2fa2277c7")
JerusalemJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=293198&APPID=0790aa655754a712e0fb78e2fa2277c7")
Qiryat_ShemonaJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=293825&APPID=0790aa655754a712e0fb78e2fa2277c7")
HaifaJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=294801&APPID=0790aa655754a712e0fb78e2fa2277c7")
TelavivJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=293397&APPID=0790aa655754a712e0fb78e2fa2277c7")
EilatJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=295277&APPID=0790aa655754a712e0fb78e2fa2277c7")
RishonJson = fromJSON("http://api.openweathermap.org/data/2.5/weather?id=293703&APPID=0790aa655754a712e0fb78e2fa2277c7")
israelCurrentWeather = matrix(c(NetanyaJson$wind$speed,JerusalemJson$wind$speed,Qiryat_ShemonaJson$wind$speed,HaifaJson$wind$speed,TelavivJson$wind$speed,EilatJson$wind$speed,RishonJson$wind$speed,
NetanyaJson$clouds$all,JerusalemJson$clouds$all, Qiryat_ShemonaJson$clouds$all,HaifaJson$clouds$all,TelavivJson$clouds$all,EilatJson$clouds$all,RishonJson$clouds$all,
NetanyaJson$main$humidity,JerusalemJson$main$humidity,Qiryat_ShemonaJson$main$humidity,HaifaJson$main$humidity,TelavivJson$main$humidity,EilatJson$main$humidity,RishonJson$main$humidity,
NetanyaJson$main$temp,JerusalemJson$main$temp,Qiryat_ShemonaJson$main$temp,HaifaJson$main$temp,TelavivJson$main$temp, EilatJson$main$temp,RishonJson$main$temp,
NetanyaJson$main$temp_min,JerusalemJson$main$temp_min,Qiryat_ShemonaJson$main$temp_min,HaifaJson$main$temp_min,TelavivJson$main$temp_min,EilatJson$main$temp_min,RishonJson$main$temp_min,
NetanyaJson$main$temp_max,JerusalemJson$main$temp_max,Qiryat_ShemonaJson$main$temp_max,HaifaJson$main$temp_max,TelavivJson$main$temp_max,EilatJson$main$temp_max,RishonJson$main$temp_max),
ncol=6,nrow = 7 )
rownames(israelCurrentWeather) = c("Netanya","Jerusalem","Qiryat_Shemona", "Haifa","Telaviv","eilat" ,"Rishon")
colnames(israelCurrentWeather) = c("wind","cloudiness","humidity","temp","temp_min","temp_max")
israelCurrentWeather
source('~/OpenWeatherApi.R')
source('~/Documents/ML/Targil2/OpenWeatherApi.R')
install.packages("ggplot")
install.packages("ggmap")
library(ggmap)
install.packages("ggmap")
library(ggmap)
sp2<-ggplot(f, aes(x=latitude, y=longitude, color=pm25)) + geom_point()
sp2<- sp2 + facet_grid(. ~ region)
sp2+scale_color_gradient2(midpoint=12, low="blue", mid="pink", high="red", space ="Lab" )
install.packages("ggmap")
install.packages("ggmap")
library(ggmap)
sp2<-ggplot(f, aes(x=latitude, y=longitude, color=pm25)) + geom_point()
sp2<- sp2 + facet_grid(. ~ region)
sp2+scale_color_gradient2(midpoint=12, low="blue", mid="pink", high="red", space ="Lab" )
sp2
install.packages("mlbench")
install.packages("caret")
source('~/map.R')
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv')
g = graph.data.frame(ga.data)
summary(g)
V(g)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames')
g = graph.data.frame(ga.data)
summary(g)
V(g)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames')
g = graph.data.frame(ga.data)
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames')
g = graph.data.frame(ga.data)
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames')
g = graph.data.frame(ga.data)
summary(g)
V(g)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv')
g = graph.data.frame(ga.data)
summary(g)
V(g)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv')
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv',header = T)
ga.data
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv',header = T)
ga.data
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv',header = T)
ga_names =  graph.data.frame(ga.data,directed = F)
summary(ga_names)
V(ga_edges)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv',header = T)
ga_names =  graph.data.frame(ga.data,directed = F)
summary(ga_names)
V(ga_names)$name
folder = '/Users/Hila/Documents/ML/Targil3'
setwd(folder)
require(igraph)
ga.data = read.csv('NationalNames.csv',header = T)
ga_names =  graph.data.frame(ga.data,directed = F)
summary(ga_names)
V(ga_names)$name
#Remove self-Loops is exist
ga_names = simplify(ga_names)
#Calculate betweenness
ga_bet = betweenness(ga_names)
